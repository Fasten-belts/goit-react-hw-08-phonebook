{"version":3,"file":"static/js/740.d85bd0c9.chunk.js","mappings":"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","sources":["redux/selectors.js","components/ContactList/ContactList.styled.js","components/ContactList/ContactList.jsx","components/ContactForm/ContactForm.styled.js","components/ContactForm/ContactForm.jsx","components/Filter/Filter.styled.js","components/Filter/Filter.jsx","pages/ContactsPage.jsx"],"sourcesContent":["import { createSelector } from '@reduxjs/toolkit';\n\nexport const selectContacts = state => state.contacts.contacts;\nexport const selectFilter = state => state.filter;\nexport const selectIsLoading = state => state.contacts.isLoading;\nexport const selectIsError = state => state.contacts.isError;\n\nexport const selectVisibleContacts = createSelector(\n  [selectContacts, selectFilter],\n  (contacts, filter) => {\n    return contacts.filter(contact =>\n      contact.name.toLowerCase().includes(filter.toLowerCase())\n    );\n  }\n);\n","import styled from 'styled-components';\n\nexport const ContactListWrapper = styled.ul`\n  list-style: none;\n  padding: 0;\n  margin-top: 20px;\n`;\n\nexport const ContactListItem = styled.li`\n  background-image: linear-gradient(-180deg, blueviolet 0%, #404040 100%);\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  padding: 10px;\n  border: 3px solid blueviolet;\n  border-radius: 16px;\n  margin-bottom: 10px;\n  gap: 20px;\n`;\n\nexport const ContactName = styled.span`\n  font-family: Coiny;\n  font-size: 20px;\n  font-weight: 600;\n  color: magenta;\n`;\n\nexport const ContactNumber = styled.span`\n  color: magenta;\n`;\n\nexport const DeleteButton = styled.button`\n  background: linear-gradient(to bottom, #3a0880, #863cb1, #ce13db);\n  font-family: Coiny;\n  font-size: 20px;\n  font-weight: 600;\n  background-color: #4f2ee8;\n  color: #ff87fb;\n  border: none;\n  border-radius: 10px;\n  padding: 10px;\n  cursor: pointer;\n  &:hover {\n    color: magenta;\n  }\n`;\n","import { useDispatch, useSelector } from 'react-redux';\nimport {\n  ContactListWrapper,\n  ContactListItem,\n  ContactName,\n  ContactNumber,\n  DeleteButton,\n} from './ContactList.styled';\nimport { selectVisibleContacts } from 'redux/selectors';\nimport { deleteContact } from 'redux/operations';\n\nexport const ContactList = () => {\n  const dispatch = useDispatch();\n  const filteredContacts = useSelector(selectVisibleContacts);\n\n  return (\n    <ContactListWrapper>\n      {filteredContacts.map(({ id, name, number }) => (\n        <ContactListItem key={id}>\n          <ContactName>{name}:</ContactName>{' '}\n          <ContactNumber>{number}</ContactNumber>\n          <DeleteButton onClick={() => dispatch(deleteContact(id))}>\n            Delete\n          </DeleteButton>\n        </ContactListItem>\n      ))}\n    </ContactListWrapper>\n  );\n};\n","import styled from 'styled-components';\nimport { Field, Form, ErrorMessage } from 'formik';\n\nexport const StyledForm = styled(Form)`\n  background-image: linear-gradient(-180deg, blueviolet 0%, #404040 100%);\n  font-family: Coiny;\n  color: #b88efa;\n  padding: 30px;\n  border: 3px solid blueviolet;\n  border-radius: 16px;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  gap: 10px;\n  margin-top: 20px;\n`;\n\nexport const LabelForm = styled.label`\n  display: flex;\n  flex-direction: column;\n  gap: 20px;\n  width: 300px;\n  color: #ff87fb;\n  font-family: Coiny;\n  font-size: 20px;\n  font-weight: 600;\n`;\n\nexport const InputForm = styled(Field)`\n  padding: 10px;\n  border: 1px solid blueviolet;\n  border-radius: 16px;\n  background-color: #b88efa;\n`;\n\nexport const ErrorForm = styled(ErrorMessage)`\n  color: red;\n  font-size: 14px;\n  margin-top: 4px;\n`;\n\nexport const ButtonForm = styled.button`\n  background: linear-gradient(to bottom, #3a0880, #863cb1, #ce13db);\n  font-family: Coiny;\n  font-size: 20px;\n  font-weight: 600;\n  background-color: #4f2ee8;\n  color: #ff87fb;\n  border: none;\n  border-radius: 10px;\n  padding: 10px;\n  cursor: pointer;\n  &:hover {\n    color: magenta;\n  }\n`;\n","import { Formik } from 'formik';\nimport * as Yup from 'yup';\nimport {\n  StyledForm,\n  LabelForm,\n  InputForm,\n  ErrorForm,\n  ButtonForm,\n} from './ContactForm.styled';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { selectContacts } from 'redux/selectors';\nimport { addContact } from 'redux/operations';\n\nconst FormSchema = Yup.object().shape({\n  name: Yup.string()\n    .min(2, 'Too Short!')\n    .max(50, 'Too Long!')\n    .matches(\n      \"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\",\n      \"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n    )\n    .required('Required'),\n  number: Yup.string()\n    .min(9, '9 digits required!')\n    .max(13, 'Less than 13 symbols!')\n    .matches(\n      /\\+?\\d{1,4}?[ .\\-\\s]?\\(?\\d{1,3}?\\)?[ .\\-\\s]?\\d{1,4}[ .\\-\\s]?\\d{1,4}[ .\\-\\s]?\\d{1,9}/,\n      'Phone number must be digits and can contain spaces, dashes, parentheses and can start with +'\n    )\n    .required('Required'),\n});\n\nexport const ContactForm = () => {\n  const dispatch = useDispatch();\n  const contacts = useSelector(selectContacts);\n\n  const handleSubmitForm = (values, action) => {\n    const isInContacts = contacts.some(\n      ({ name, number }) =>\n        name.toLowerCase() === values.name.toLowerCase() ||\n        number === values.number\n    );\n\n    if (isInContacts) {\n      return alert(`${values.name} or ${values.number}is already in contacts.`);\n    }\n\n    dispatch(addContact(values));\n    action.resetForm();\n  };\n\n  return (\n    <Formik\n      initialValues={{ name: '', number: '' }}\n      validationSchema={FormSchema}\n      onSubmit={handleSubmitForm}\n    >\n      <StyledForm>\n        <h1>Phonebook</h1>\n        <LabelForm>\n          Name\n          <InputForm type=\"text\" name=\"name\" />\n          <ErrorForm name=\"name\" component=\"div\" />\n        </LabelForm>\n\n        <LabelForm>\n          Number\n          <InputForm type=\"tel\" name=\"number\" />\n          <ErrorForm name=\"number\" component=\"div\" />\n        </LabelForm>\n\n        <ButtonForm type=\"submit\">Add Contact</ButtonForm>\n      </StyledForm>\n    </Formik>\n  );\n};\n","import styled from 'styled-components';\n\nexport const FilterWrapper = styled.div`\n  background-image: linear-gradient(-180deg, blueviolet 0%, #404040 100%);\n  font-family: Coiny;\n  color: #b88efa;\n  padding: 10px;\n  border: 3px solid blueviolet;\n  border-radius: 16px;\n  margin-bottom: 10px;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  gap: 10px;\n  margin-top: 20px;\n`;\n\nexport const FilterLabel = styled.label`\n  font-family: Coiny;\n  font-size: 20px;\n  font-weight: 600;\n  color: #ff87fb;\n`;\n\nexport const FilterInput = styled.input`\n  padding: 10px;\n  border: 1px solid blueviolet;\n  border-radius: 16px;\n  background-color: #b88efa;\n`;\n","import { selectFilter } from 'redux/selectors';\nimport { FilterWrapper, FilterLabel, FilterInput } from './Filter.styled';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { filterContacts } from 'redux/filterSlice';\n\nexport const Filter = () => {\n  const dispatch = useDispatch();\n  const filter = useSelector(selectFilter);\n  const contactsFilter = e => dispatch(filterContacts(e.target.value.trim()));\n\n  return (\n    <FilterWrapper>\n      <h2>Contacts</h2>\n      <FilterLabel>Find Contacts By Name</FilterLabel>\n      <FilterInput type=\"text\" value={filter} onChange={contactsFilter} />\n    </FilterWrapper>\n  );\n};\n","import { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { Helmet } from 'react-helmet';\nimport { selectIsLoading } from 'redux/selectors';\nimport { fetchContacts } from 'redux/operations';\nimport { ContactList } from 'components/ContactList/ContactList';\nimport { ContactForm } from 'components/ContactForm/ContactForm';\nimport { Loader } from 'components/Loader /Loader';\nimport { Filter } from 'components/Filter/Filter';\n// import { ContactsEditor } from 'components/ContactEdit/ContactEdit';\n\nexport default function Contacts() {\n  const dispatch = useDispatch();\n  const isLoading = useSelector(selectIsLoading);\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  return (\n    <>\n      <Helmet>\n        <title>Contacts</title>\n      </Helmet>\n      <ContactForm />\n      <Filter />\n      {/* <ContactsEditor /> */}\n      <div>{isLoading && Loader}</div>\n      <ContactList />\n    </>\n  );\n}\n"],"names":["selectContacts","state","contacts","selectFilter","filter","selectIsLoading","isLoading","selectVisibleContacts","createSelector","contact","name","toLowerCase","includes","ContactListWrapper","styled","_templateObject","_taggedTemplateLiteral","ContactListItem","_templateObject2","ContactName","_templateObject3","ContactNumber","_templateObject4","DeleteButton","_templateObject5","ContactList","dispatch","useDispatch","filteredContacts","useSelector","_jsx","children","map","_ref","id","number","_jsxs","onClick","deleteContact","StyledForm","Form","LabelForm","InputForm","Field","ErrorForm","ErrorMessage","ButtonForm","FormSchema","Yup","shape","min","max","matches","required","ContactForm","Formik","initialValues","validationSchema","onSubmit","values","action","some","alert","concat","addContact","resetForm","type","component","FilterWrapper","FilterLabel","FilterInput","Filter","value","onChange","e","filterContacts","target","trim","Contacts","useEffect","fetchContacts","_Fragment","Helmet","Loader"],"sourceRoot":""}